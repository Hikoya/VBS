generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  sessions      Session[]
}

model Users {
  id         String    @id @default(cuid())
  name       String
  email      String  @unique
  created_at DateTime @default(now()) @db.DateTime(0)
  updated_at DateTime @default(now()) @db.DateTime(0)
  admin      Int?     @default(0)
  studentID  String?   @unique(map: "studentID")
  roomNum   String?    @unique
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Venue {
  id         String    @id @default(cuid())
  name      String     @unique
  image  String?
  openingHours String
  description  String
  visible   Boolean @default(true)
  capacity  Int
  parentVenue   String?
  isChildVenue  Boolean @default(false)
  isInstantBook  Boolean @default(false)
  created_at DateTime @default(now()) @db.DateTime(0)
  updated_at DateTime @default(now()) @db.DateTime(0)
}

model VenueBooking {
  id      String    @id @default(cuid())
  email     String      
  venue     String
  date      Int
  cca     String
  timingSlot    Int
  purpose     String  @db.VarChar(500)
  sessionEmail  String?
  created_at DateTime @default(now()) @db.DateTime(0)
  updated_at DateTime @default(now()) @db.DateTime(0)
}

model VenueBookingRequest {
  id    String    @id @default(cuid())
  email   String
  venue     String
  date    Int
  timeSlots    String
  isApproved    Boolean @default(false)
  isRejected    Boolean @default(false)
  isCancelled   Boolean @default(false)
  purpose   String  @db.VarChar(500)
  cca  String @default("PERSONAL")
  sessionEmail  String?
  conflictRequest String?
  reason    String? 
  created_at DateTime @default(now()) @db.DateTime(0)
  updated_at DateTime @default(now()) @db.DateTime(0)
}

model CCA {
  id    String    @id @default(cuid())
  name       String   @unique(map: "name") @db.VarChar(50)
  categoryID String
  workload    String  @default("minor")
  image     String?
  created_at DateTime @default(now()) @db.DateTime(0)
  updated_at DateTime @default(now()) @db.DateTime(0)
}

model CCACategory {
  id    String    @id @default(cuid())
  name       String   @unique(map: "name") @db.VarChar(50)
  created_at DateTime @default(now()) @db.DateTime(0)
  updated_at DateTime @default(now()) @db.DateTime(0)
}  

model CCARecord {
  id    String    @id @default(cuid())
  ccaID       String
  sessionEmail    String
  leader    Boolean @default(false)   
  ccaPoints Int @default(0)
  created_at DateTime @default(now()) @db.DateTime(0)
  updated_at DateTime @default(now()) @db.DateTime(0)
}  

model CCAAttendance {
  id    String    @id @default(cuid())
  sessionID   String
  ccaID     String
  ccaAttendance   Int
  sessionEmail  String
  created_at DateTime @default(now()) @db.DateTime(0)
  updated_at DateTime @default(now()) @db.DateTime(0)
}

model CCASessions {
  id    String    @id @default(cuid())
  ccaID String 
  name  String
  date  Int
  time  String
  editable  Boolean @default(true)
  optional  Boolean @default(false)
  remarks String
  ldrNotes  String
  expectedM String?
  created_at DateTime @default(now()) @db.DateTime(0)
  updated_at DateTime @default(now()) @db.DateTime(0)
}

model Announcement {
  id    String    @id @default(cuid())
  description   String
  image       String
  sessionEmail    String   
  created_at DateTime @default(now()) @db.DateTime(0)
  updated_at DateTime @default(now()) @db.DateTime(0)
}