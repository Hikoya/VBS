generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  sessions      Session[]
}

model Users {
  id           String   @id @default(cuid())
  name         String
  email        String   @unique
  created_at   DateTime @default(now()) @db.DateTime(0)
  updated_at   DateTime @default(now()) @db.DateTime(0)
  admin        Int?     @default(0)
  acceptedTerm Boolean  @default(false)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Venue {
  id            String   @id @default(cuid())
  name          String   @unique
  image         String?
  openingHours  String
  description   String
  visible       Boolean  @default(true)
  capacity      Int
  isChildVenue  Boolean  @default(false)
  isInstantBook Boolean  @default(false)
  created_at    DateTime @default(now()) @db.DateTime(0)
  updated_at    DateTime @default(now()) @db.DateTime(0)
  parentVenue   String?
}

model VenueBooking {
  id           String   @id @default(cuid())
  email        String
  venue        String
  timingSlot   Int
  date         Int
  created_at   DateTime @default(now()) @db.DateTime(0)
  updated_at   DateTime @default(now()) @db.DateTime(0)
  purpose      String   @db.VarChar(500)
  cca          String
  sessionEmail String?
}

model VenueBookingRequest {
  id              String   @id @default(cuid())
  email           String
  venue           String
  date            Int
  isApproved      Boolean  @default(false)
  isRejected      Boolean  @default(false)
  isCancelled     Boolean  @default(false)
  cca             String   @default("PERSONAL")
  created_at      DateTime @default(now()) @db.DateTime(0)
  updated_at      DateTime @default(now()) @db.DateTime(0)
  purpose         String   @db.VarChar(500)
  timeSlots       String
  sessionEmail    String?
  conflictRequest String?
  reason          String?
}

model CCA {
  id         String   @id @default(cuid())
  name       String   @unique(map: "name") @db.VarChar(50)
  categoryID String
  created_at DateTime @default(now()) @db.DateTime(0)
  updated_at DateTime @default(now()) @db.DateTime(0)
  workload   String   @default("minor")
  image      String?
}

model CCACategory {
  id         String   @id @default(cuid())
  name       String   @unique(map: "name") @db.VarChar(50)
  created_at DateTime @default(now()) @db.DateTime(0)
  updated_at DateTime @default(now()) @db.DateTime(0)
}

model CCARecord {
  id           String   @id @default(cuid())
  ccaID        String
  sessionEmail String
  leader       Boolean  @default(false)
  created_at   DateTime @default(now()) @db.DateTime(0)
  updated_at   DateTime @default(now()) @db.DateTime(0)
}

model CCAAttendance {
  id            String   @id @default(cuid())
  sessionID     String
  ccaID         String
  ccaAttendance Float
  sessionEmail  String
  created_at    DateTime @default(now()) @db.DateTime(0)
  updated_at    DateTime @default(now()) @db.DateTime(0)
}

model CCASessions {
  id         String   @id @default(cuid())
  name       String
  date       Int
  time       String
  editable   Boolean  @default(true)
  optional   Boolean  @default(false)
  remarks    String
  ldrNotes   String
  created_at DateTime @default(now()) @db.DateTime(0)
  updated_at DateTime @default(now()) @db.DateTime(0)
  ccaID      String
}

model Announcement {
  id           String   @id @default(cuid())
  description  String
  image        String
  sessionEmail String
  created_at   DateTime @default(now()) @db.DateTime(0)
  updated_at   DateTime @default(now()) @db.DateTime(0)
}

model KEIPS {
  id            String   @id @default(cuid())
  matnet        String   @unique
  topCCA        String   @db.MediumText
  allCCA        String   @db.MediumText
  bonusCCA      String   @db.MediumText
  contrasting   Boolean
  OSA           Int
  osaPercentile Float
  roomDraw      Int
  semesterStay  String
  fulfilled     Boolean
  created_at    DateTime @default(now()) @db.DateTime(0)
  updated_at    DateTime @default(now()) @db.DateTime(0)
}

model Log {
  id         String   @id @default(cuid())
  location   String
  username   String
  content    String   @db.LongText
  created_at DateTime @default(now()) @db.DateTime(0)
  updated_at DateTime @default(now()) @db.DateTime(0)
}

model a467_c263_54ff_853e_b193485c5b32_20221223172317_vrepl {
  id            String   @id
  name          String
  date          Int
  time          String
  editable      Boolean  @default(true)
  optional      Boolean  @default(false)
  remarks       String
  ldrNotes      String
  created_at    DateTime @default(now()) @db.DateTime(0)
  updated_at    DateTime @default(now()) @db.DateTime(0)
  ccaID         String
  expectedM     String?
  expectedMName String?

  @@map("_0167a467_c263_54ff_853e_b193485c5b32_20221223172317_vrepl")
}
